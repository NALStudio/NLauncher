###
Blazor WASM/MAUI hybrid?
+ Same UI, multiple platforms
+ No MVVM (I fucking hate that thing)
+ Already quite familiar for me
- No WASM multithreading (yet)
- Not mature, lots of issues (although not as many as MAUI)

AOT compiled
+ Performance
+ Consistent behaviour between desktop and web
- Difficult to work with
###

[ Repository Spec ]
File layout:
- Index
    - index.json
    - aliases.json

    // We can't implement news in the web app since we must access platform features and thus cannot distribute the app as a web app.
    - @news  // yes, the folder is actually called @news so that it sorts at the top and doesn't conflict with the publisher directory name
        - $news_index  // index of the news, they don't need to be sequencial and are only used for sorting (index manager can have news 'slots')
            - background.png // 16:9 ratio image (recommended: 1920x1080 px)
            - logo.png // images can be of any size (will be scaled to a specific height)
            - news.json // NOTE: Can't be manifest.json as that name is reserved for applications (or otherwise we will incorrectly discover news as an application)

    - $publisher
        - $app_name
            - manifest.json
            - description.md // description.md build resolves all relative paths to this directory.
            - assets // (optional) a directory containing all of the assets description.md uses.

            // additional image sizes can be added "icon_512.png" for 512x512 px icon for example
            // The value after the underscore doesn't matter, we only determine the type of the image from the prefix itself (icon_, banner_, panel_).
            - icon.png // 1:1 ratio icon image (recommended: 1024x1024 px), used for Discord Rich Presence
            - banner.png // 16:9 ratio image (recommended: 1920x1080 px), used in store page and as a wide library game icon
            - panel.png // 2:3 ratio image (recommended: 720x1080 px), used as the vertical library game icon
- Binaries
    - $publisher
        - $app_name
            - $vernum ($version_identifier)    // vernum: an incrementing integer value (i.e. 6), version_identifier: The identifier of the release (i.e. 1.9.6)
                - [zip file | diff file]

[index.json]
{
    "indexmanifest_path": "string" // A relative path from the root of the INDEX to where the indexmanifest.json should be built. Recommended value: "./indexmanifest.json"
    "repository": {
        "owner": "string",
        "repo": "string",
        "path": "string", // A relative path from the root of the REPOSITORY to the root of the index. Use slash ('/') to point to the root of the repository.
    }
}

[ aliases.json Spec ]
// Currently aliases is a dictionary so we can't have duplicated safenames by accident. This can be changed to an object later if necessary. (breaking change)
// This is also compiled into the index so that we only need to download one file on startup
{
    // Values are nested inside "aliases" so that we can easily extend this json document if necessary (add version counter etc.)
    "aliases": {
        // A dictionary which maps all of the reserved app names into their respective apps' UUIDs
        // safename must be URL safe (i.e. "koponen-dating-simulator")
        // If multiple names are registered to the same application, the longest one will be used by default
        "$safename": "$uuid"
    }
}

[ manifest.json Spec ]
// nullable values can be omitted
{
    "display_name": "string",
    "uuid": "string" // Use UUID to decouple app names from identifiers (so that the publisher and app_name directories can be renamed at will)
    "developer": "string", // Developer display name
    "publisher": "string", // Publisher display name, will not be displayed if it is the same as the developer display name
    "release": {
        "state": "string", // released | early_access | not_released  (when not_released, app cannot be downloaded)
        "date": "string?", // Release date as YYYY-MM-DD or null for TBD (should this be higher resolution due to timezones?)
    },
    "age_rating": number?, // 3, 7, 10, 13, 16 or 18 as age rating or null for no rating
    "color": "string?", // #XXXXXX hex color for the app or NLauncher default if omitted
    "priority": "number?", // an integer to determine the priority of this app in sorting, defaults to 0 if omitted.
    "versions": [
        {
            "vernum": "number", // (i.e. 6)
            "identifier": "string", // (i.e. 1.9.6)
            "min_recommended_resolution": "number?", // Vertical resolution of the display (i.e. 1440). Can be extended into a full on structure later if needed.
            "installs": [
                // Multiple install options so that we can have separate binary and binary_diff downloads depending on whether the app is updating or installing for the first time
                // App will pick the best install option during runtime
                // Empty list means that this app version cannot be installed
                {
                    "type": "string", // binary | msix | website | storelink (binary_diff type file format not yet determined)
                    "id": "XXXX", // where XXXX is a random 4 character hex value representing an uint16. Install ids need to be unique on their specific version (the same id can be used in multiple installs if they are located in different versions). It's probably easiest to just randomly generate an id during install creation.
                #IF BINARY
                    "platform": "string", // windows | browser | android | ..., most commonly windows
                    "download_url": "string", // URL of the zip (other zipping formats might be supported later?)
                    "download_hash": "string", // SHA256 hash of the download encoded in base64
                    "program_path": "string" // Path to the .exe file to run (Windows)
                #ELIF MSIX
                    // NOT FINISHED
                    "download_url": "string",
                    "download_hash": "string",
                    "app_id": "string" // TODO: Determine the best way to detect that a given MSIX app is installed and how to run it
                #ELIF WEBSITE
                    "url": "string",
                    "supports_pwa": "bool?" // Defaults to false if omitted. PWA functionality is in the backlog and has not yet been implemented.
                #ELIF STORELINK
                    "platform": "string", // most commonly android
                    "url": "string"
                #ENDIF
                }
            ]
        }
    ]
}

[ news.json Spec ]
{
    "title": "string",
    "text": "string",
    "interactivity": {
        "type": "string", // explore, play_now
    #IF EXPLORE
        // Route the user to the store page
        // where they can browse all of the applications available
    #ELIF PLAY_NOW
        // Route the user to app's store page
        "app_id": "string"  // the UUID of the application
    #ENDIF
    }
}

[ indexmanifest.json Spec ]
// GitHub repository is compiled into an index minified JSON file with the following data:
{
    "aliases": ..., // copied from aliases.json
    "metadata": ..., // copied from index.json
    "news": [
        {
            "index": "number",
            "manifest": ..., // copied from news.json
            "assets_urls": {
                "background": "string",
                "logo": "string"
            }
        }
    ],
    "index": [
        {
            "manifest": ..., // copied from manifest.json
            "description_markdown": "string",
            "assets": [
                {
                    "type": "string", // icon | banner | panel
                    "width": "number",
                    "height": "number",
                    "url": "string"
                }
            ]
        }
    ]
}

[ Web Application ]
Installation:
- Binary executable
    - Ask for user to install NLauncher
	- OR allow to download .zip for manual install (choose from the 2 options)
	- Playtime will not be tracked.
- Windows App, MSIX
	- Ask for user to install NLauncher
    - OR warn for manual install and open browser to download the MSIX package
	- Playtime will not be tracked.
- Website
    - Navigate to website on a new tab

[ Desktop Application ]
Installation:
- Binary executable (KDS, Matriisit, ...)
	- Track playtime by starting a new process that does not render UI etc. thus reducing system load during gameplay.
- Windows App, MSIX
	- Ask user whether they trust the dev certificates and if they do, we install them to Windows.
	- Playtime will not be tracked. User can start the application easily through Windows.
- Website
	- Playtime will not be tracked.

No custom installer implementation yet since I have no idea how I could make a system to detect whether a given app is installed and how to run it.
