@page "/store"

@using NLauncher.Components.Cards
@using NLauncher.Index.Models.Index
@using NLauncher.Services.Index
@using System.Collections.Immutable
@using System.Runtime.InteropServices

@inject IndexService IndexService

<PageTitle>NLauncher - Store</PageTitle>

<!-- Mud grid default spacing is 6 so bottom padding: 6 * 4px => 24px -->
<!-- Set overflow-y to force scroll bar to be visible -->
<MudGrid Style="position:relative;top:0;left:0;right:0;bottom:0;padding-bottom:24px"> 
    @{
        int storeCardCount;
        if (entriesSorted.HasValue)
            storeCardCount = entriesSorted.Value.Length;
        else if (showLoadingCards!.Value) // showLoadingCards is the first bool we set on page load so it must have a value at this point
            storeCardCount = 12;
        else
            storeCardCount = 0;

        for (int i = 0; i < storeCardCount; i++)
        {
            IndexEntry? app = entriesSorted?[i];
            <StoreCardItem Entry="app" />
        }
    }
</MudGrid>

@code {
    private IndexManifest? index;
    private ImmutableArray<IndexEntry>? entriesSorted;

    private bool? showLoadingCards = null;

    protected override async Task OnInitializedAsync()
    {
        if (IndexService.TryGetCachedIndex(out index))
        {
            showLoadingCards = false;
        }
        else
        {
            showLoadingCards = true;
            index = await IndexService.GetIndexAsync();
        }

        entriesSorted = await Task.Run(() => SortEntries(index));
        StateHasChanged();
    }

    private static ImmutableArray<IndexEntry> SortEntries(IndexManifest manifest)
    {
        static int CompareFunc(IndexEntry a, IndexEntry b)
        {
            // Try to compare priorities first
            // Compare b to a to sort from largest priority to smallest
            int comparePriority = b.Manifest.Priority.CompareTo(a.Manifest.Priority);
            if (comparePriority != 0)
                return comparePriority;

            // If priorities are equal, sort alphabetically
            return a.Manifest.DisplayName.CompareTo(b.Manifest.DisplayName);
        }

        IndexEntry[] entries = manifest.Entries.ToArray();
        Array.Sort(entries, CompareFunc);
        return ImmutableCollectionsMarshal.AsImmutableArray(entries);
    }
}
