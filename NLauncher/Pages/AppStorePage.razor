@using NLauncher.Code.Markdown
@using NLauncher.Components
@using NLauncher.Components.Cards.AppInfo
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Index
@using NLauncher.Services.Index
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis

@page "/store/{AppId}"

@inject IndexService IndexService
@inject NavigationManager navigationManager

@if (app is not null)
{
    // Show app name in title if possible
    // use default title otherwise
    <PageTitle>NLauncher - @(app.Manifest.DisplayName)</PageTitle>
}

<MudContainer MaxWidth="MaxWidth.Large" Gutters="false">
    <!-- Banner -->
    @if (app is not null)
    {
        <AppImage Entry="@app">
            <ImageContent Context="asset">
                <MudImage Class="banner_image_style"
                          ObjectPosition="ObjectPosition.Center"
                          ObjectFit="ObjectFit.Cover"
                          Src="@(asset.Url.ToString())" />
            </ImageContent>
        </AppImage>
    }
    else
    {
        <MudSkeleton Class="banner_image_style" Style="height:auto" SkeletonType="SkeletonType.Rectangle" />
    }

    <MudStack Style="padding-top:12px">
        <!-- Title -->
        @if (app is not null)
        {
            <MudText Typo="Typo.h3">@(app.Manifest.DisplayName)</MudText>           
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Text" Height="80px" Width="420px" />
        }

        <MudStack Row AlignItems="AlignItems.End" Wrap="Wrap.WrapReverse">
            <!-- Description -->
            <MudPaper Class="pa-3" Style="flex:2;min-width:320px" Outlined Elevation="0">
                @if (app is not null)
                {
                    <!-- Subtract bottom margin since MudMarkdown's last line has margin which makes the card bottom too big -->
                    <div style="margin-bottom:-20px">
                        <MudMarkdown MarkdownPipeline="@(DefaultMarkdownPipeline.Instance)"
                        OverrideHeaderTypo="@RemapMarkdownTypo"
                        Value="@(app.DescriptionMarkdown)" />
                    </div>
                }
                else
                {
                    <div>
                        <MudSkeleton Height="24px" SkeletonType="SkeletonType.Text" />
                        <MudSkeleton Height="24px" SkeletonType="SkeletonType.Text" />
                        <MudSkeleton Height="24px" SkeletonType="SkeletonType.Text" />
                    </div>
                }
            </MudPaper>

            <!-- App Info -->
            <AppInfoCard Style="flex:1;min-width:320px" Entry="@app" />
        </MudStack>
    </MudStack>
</MudContainer>

<style>
.banner_image_style {
    user-select: none;
    width: 100%;
    aspect-ratio: 16 / 9; /* Set aspect ratio to avoid layout shift during load */
    max-height: 60vh;
    border-radius: 12px;
}
</style>

@code {
    [Parameter]
    public required string AppId { get; set; }

    private IndexEntry? app;

    // Use OnParametersSet so that we detect when we change the application, but keep the page
    // like when searching for a new app for example
    protected override async Task OnParametersSetAsync()
    {
        if (!IndexService.TryGetCachedIndex(out IndexManifest? index))
            index = await IndexService.GetIndexAsync();

        IndexEntry? appEntry = null;
        if(TryParseId(index, AppId, out Guid appIdGuid))
        {
            if (index.TryGetEntry(appIdGuid, out IndexEntry? foundEntry))
                appEntry = foundEntry;
        }

        if (appEntry is not null)
        {
            app = appEntry;
            StateHasChanged();
        }
        else
        {
            navigationManager.NavigateTo("not-found"); // Dirty solution, but you cannot currently show the 404 page dynamically
        }

        // DEBUG
        // app = null;
        // StateHasChanged();
    }

    private static bool TryParseId(IndexManifest index, string id, [MaybeNullWhen(false)] out Guid appId)
    {
        // Try to parse as guid
        if (Guid.TryParse(id, out Guid parsedGuid))
        {
            appId = parsedGuid;
            return true;
        }

        // Try to parse as alias
        Guid? guidFromAliases = index.Aliases.GetGuid(id);
        if (guidFromAliases.HasValue)
        {
            appId = guidFromAliases.Value;
            return true;
        }

        appId = default;
        return false;
    }

    private static Typo RemapMarkdownTypo(Typo typo)
    {
        const Typo minHeading = Typo.h1;
        const Typo maxHeading = Typo.h6;

        // Do not change typo if it isn't a heading.
        // Currently MudBlazor Markdown doesn't call this method with anything other than headers,
        // but I have this check just in case this behaviour changes in the future.
        if (typo < minHeading || typo > maxHeading)
            return typo;

        typo += 2;
        if (typo > maxHeading)
            typo = maxHeading;

        return typo;
    }

    public static string GetPageRoute(IndexManifest index, Guid appUuid)
    {
        // Prefer to use app name if possible
        string? id = index.Aliases.GetName(appUuid);
        id ??= appUuid.ToString();

        return "./store/" + id;
    }
}
