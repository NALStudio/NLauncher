@using NLauncher.Code.Markdown
@using NLauncher.Components
@using NLauncher.Components.Cards.AppInfo
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Index
@using NLauncher.Services.Index
@using System.Diagnostics

@page "/app/{AppId}"

@inject IndexService IndexService
@inject NavigationManager navigationManager

@if (app is not null)
{
    <PageTitle>NLauncher - @(app.Manifest.DisplayName)</PageTitle>
}
else
{
    <PageTitle>NLauncher</PageTitle>
}

<MudContainer MaxWidth="MaxWidth.Large" Gutters="false">
    <!-- Banner -->
    @if (app is not null)
    {
        <BannerImage Entry="@app">
            <ImageContent Context="asset">
                <MudImage Style="user-select:none"
                            Class="banner_image_style"
                            ObjectFit="ObjectFit.Cover"
                            Src="@(asset.Url.ToString())" />
            </ImageContent>
        </BannerImage>
    }
    else
    {
        <MudSkeleton Class="banner_image_style" Style="aspect-ratio:16/9;height:auto;" SkeletonType="SkeletonType.Rectangle" />
    }

    <MudStack Style="padding-top:12px; min-width:256px;">
        <!-- Title -->
        @if (app is not null)
        {
            <MudText Typo="Typo.h3">@(app.Manifest.DisplayName)</MudText>           
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Text" Height="80px" Width="420px" />
        }

        <MudStack Row AlignItems="AlignItems.Start">
            <!-- Description -->
            <MudCard Class="pa-3" Style="flex:1" Outlined Elevation="0">
                @if (app is not null)
                {
                    <MudMarkdown MarkdownPipeline="@(DefaultMarkdownPipeline.Instance)" OverrideHeaderTypo="@RemapMarkdownTypo" Value="@(app.DescriptionMarkdown)" />
                }
                else
                {
                    <div>
                        <MudSkeleton Height="24px" SkeletonType="SkeletonType.Text" />
                        <MudSkeleton Height="24px" SkeletonType="SkeletonType.Text" />
                        <MudSkeleton Height="24px" SkeletonType="SkeletonType.Text" />
                    </div>
                }
            </MudCard>

            <!-- App Info -->
            <AppInfoCard Entry="@app" />
        </MudStack>
    </MudStack>
</MudContainer>

<style>
    .banner_image_style {
        width: 100%;
        border-radius: 12px;
    }
</style>

@code {
    [Parameter]
    public required string AppId { get; set; }

    private IndexEntry? app;

    // Use OnParametersSet so that we detect when we change the application, but keep the page
    // like when searching for a new app for example
    protected override async Task OnParametersSetAsync()
    {
        IndexManifest index = await IndexService.GetIndexAsync();

        Guid? appUuid = TryParseId(index, AppId);
        app = index.Entries.FirstOrDefault(e => e.Manifest.Uuid == appUuid);
        if (app is not null)
            StateHasChanged();
        else
            navigationManager.NavigateTo("not-found"); // Dirty solution, but you cannot currently show the 404 page dynamically

        // DEBUG
        // app = null;
        // StateHasChanged();
    }

    private static Guid? TryParseId(IndexManifest index, string id)
    {
        Guid? appUuid;

        // Try to parse as guid
        if (Guid.TryParse(id, out Guid parsedGuid))
            appUuid = parsedGuid;
        else
            appUuid = null;

        // Try to parse as alias
        if (!appUuid.HasValue)
        {
            if (index.Aliases.Aliases.TryGetValue(id, out Guid value))
                appUuid = value;
        }

        return appUuid;
    }

    private static Typo RemapMarkdownTypo(Typo typo)
    {
        Debug.Assert(typo >= Typo.h1);
        Debug.Assert(typo <= Typo.h5);

        const int maxTypo = (int)Typo.h5;

        int oldTypo = (int)typo;
        int newTypo = oldTypo + 2;

        if (newTypo > maxTypo)
            newTypo = maxTypo;

        return (Typo)newTypo;
    }

    public static string GetPageRoute(IndexManifest index, AppManifest app)
    {
        // Prefer to use app name if possible
        string? id = index.Aliases.GetName(app.Uuid);
        id ??= app.Uuid.ToString();

        return "./app/" + id;
    }
}
