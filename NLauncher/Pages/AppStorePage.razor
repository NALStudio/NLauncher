@using NLauncher.Components
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Index
@using NLauncher.Services.Index

@page "/app/{AppId}"

@inject IndexService IndexService
@inject NavigationManager navigationManager

@if (app is not null)
{
    <PageTitle>NLauncher - @(app.Manifest.DisplayName)</PageTitle>
}
else
{
    <PageTitle>NLauncher</PageTitle>
}

<!-- Banner -->
@if (app is not null)
{
    <BannerImage Entry="@app">
        <ImageContent Context="asset">
            <MudImage Class="banner_image_style" Src="@(asset.Url.ToString())" />
        </ImageContent>
    </BannerImage>
}
else
{
    <MudSkeleton Class="banner_image_style" Style="aspect-ratio:16/9;height:auto;" SkeletonType="SkeletonType.Rectangle" />
}

<MudStack Style="padding-top:12px; min-width:256px;">
    <!-- Title -->
    @if (app is not null)
    {
        <h1>@(app.Manifest.DisplayName)</h1>           
    }
    else
    {
        <MudSkeleton SkeletonType="SkeletonType.Text" Height="48px" Width="300px" />
    }

    <MudStack Reverse Row AlignItems="AlignItems.Start">
        <AppInfoCard Entry="@app" />
        <!-- Description -->
        <MudCard Class="pa-3" Outlined Elevation="0">
            @if (app is not null)
            {
                <!-- pre-wrap so that newlines are actually visible, MudBlazor hides newlines by default:  -->
                <!-- Related SO: https://stackoverflow.com/questions/64157834/how-can-i-have-new-line-in-blazor/75533639#75533639 -->
                <div style="white-space:pre-wrap;">
                    @((MarkupString)app.DescriptionHtml)
                </div>
            }
            else
            {
                <div>
                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                </div>
            }
        </MudCard>
    </MudStack>
</MudStack>

<style>
    .banner_image_style {
        width: 100%;
        border-radius: 12px;
    }
</style>

@code {
    [Parameter]
    public required string AppId { get; set; }

    private IndexEntry? app;

    // Use OnParametersSet so that we detect when we change the application, but keep the page
    // like when searching for a new app for example
    protected override async Task OnParametersSetAsync()
    {
        IndexManifest index = await IndexService.GetIndexAsync();

        Guid? appUuid = TryParseId(index, AppId);
        app = index.Entries.FirstOrDefault(e => e.Manifest.Uuid == appUuid);
        if (app is not null)
            StateHasChanged();
        else
            navigationManager.NavigateTo("not-found"); // Dirty solution, but you cannot currently show the 404 page dynamically

        // DEBUG
        // app = null;
        // StateHasChanged();
    }

    private static Guid? TryParseId(IndexManifest index, string id)
    {
        Guid? appUuid;

        // Try to parse as guid
        if (Guid.TryParse(id, out Guid parsedGuid))
            appUuid = parsedGuid;
        else
            appUuid = null;

        // Try to parse as alias
        if (!appUuid.HasValue)
        {
            if (index.Aliases.Aliases.TryGetValue(id, out Guid value))
                appUuid = value;
        }

        return appUuid;
    }

    public static string GetPageRoute(IndexManifest index, AppManifest app)
    {
        // Prefer to use app name if possible
        string? id = index.Aliases.GetName(app.Uuid);
        id ??= app.Uuid.ToString();

        return "./app/" + id;
    }
}
