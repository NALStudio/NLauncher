@using NLauncher.Code.Models
@using NLauncher.Services.Apps
@using System.Diagnostics
@using NLauncher.Services.Apps.Installing

@implements IAsyncDisposable

@inject AppInstallService InstallService

<MudPaper Class="pa-3" Outlined Elevation="0">
    <MudStack Spacing="0">
        <MudText Class="mb-1" Typo="Typo.h6">@(Install.App.DisplayName)</MudText>

        @{
            (string state, Color color) = GetState();
            double? progress = GetProgress();
            string? message = GetMessage();

            <MudStack Row Spacing="0" StretchItems="StretchItems.Start">
                <MudText Typo="Typo.subtitle1">@state</MudText>

                @if (Install.IsFinished && !Install.GetResult().IsSuccess)
                {
                    <MudIconButton Size="Size.Small" Icon="@(Icons.Material.Rounded.Replay)" OnClick="RestartInstall" />
                }
                @if (!Install.IsFinished)
                {
                    <MudIconButton Size="Size.Small" Icon="@(Icons.Material.Rounded.Stop)" OnClick="StopInstall" />
                }

                <MudIconButton Disabled="@(!Install.IsFinished)" Size="Size.Small" Icon="@(Icons.Material.Rounded.Close)" OnClick="RemoveInstall" />
            </MudStack>
            <MudProgressLinear Class="mt-1" Rounded Color="@color" Indeterminate="@(!progress.HasValue)" Value="@(progress ?? 0d)" Min="0d" Max="1d" />

            @if (!string.IsNullOrWhiteSpace(message))
            {
                <MudText Typo="Typo.caption">@message</MudText>
            }
        }
    </MudStack>
</MudPaper>

@code {
    private RunningAppInstall? previousInstall = null;

    [Parameter, EditorRequired]
    public required RunningAppInstall Install { get; set; }

    private InstallProgress progress = InstallProgress.Starting;
    private InstallResult? result = null;

    private (Task Task, CancellationTokenSource Cancellation)? uiTask;

    private bool restartingInstall = false;

    protected override void OnParametersSet()
    {
        if (ReferenceEquals(previousInstall, Install))
            return;

        UnsubscribeEvents(previousInstall);
        SubscribeEvents(Install);

        previousInstall = Install;

        ResetProgressAndResult();
        RestartUiUpdate();
    }

    private void ResetProgressAndResult()
    {
        if (Install.LatestProgress is InstallProgress existingProgress)
            progress = existingProgress;
        else
            progress = InstallProgress.Starting;

        result = Install.IsFinished ? Install.GetResult() : null;
    }

    private (string State, Color Color) GetState()
    {
        InstallResult? result = Install.IsFinished ? Install.GetResult() : null;
        return GetState(result, progress);
    }

    public static (string State, Color Color) GetState(InstallResult? result, InstallProgress progress, string finishedText = "Finished")
    {
        if (result.HasValue)
        {
            if (result.Value.IsSuccess) 
                return (finishedText, Color.Success); // success
            else if (result.Value.IsCancelled)
                return ("Cancelled", Color.Warning); // cancelled
            else
                return ("Error", Color.Error); // error
        }
        else
        {
            return (progress.Status, Color.Primary);
        }
    }

    private string? GetMessage()
    {
        return result?.ErrorMessage ?? progress.Message;
    }

    private double? GetProgress()
    {
        if (Install.IsFinished)
            return 1d;

        return progress.Progress;
    }

    private void RemoveInstall()
    {
        _ = InstallService.TryRemoveInstall(Install.App.Uuid);
    }

    private void StopInstall()
    {
        Install.RequestCancel();
    }

    private async Task RestartInstall()
    {
        if (restartingInstall)
            return;

        restartingInstall = true;

        _ = await Install.RestartAsync();
        ResetProgressAndResult(); // Reset progress after so that install can clear its data first
        StateHasChanged();

        RestartUiUpdate();

        restartingInstall = false;
    }

    private void RestartUiUpdate(RunningAppInstall? _ = null) // Unused argument for event handling
    {
        if (uiTask.HasValue)
            uiTask.Value.Cancellation.Cancel();

        CancellationTokenSource ct = new();
        uiTask = (UpdateUI(ct.Token), ct);
    }

    private async Task UpdateUI(CancellationToken cancellationToken)
    {
        if (Install.IsRunning)
        {
            await foreach (InstallProgress progress in Install.ListenForProgressUpdates(cancellationToken))
            {
                this.progress = progress;
                StateHasChanged();

                // Wait for a short while so that the UI animations have time to catch up to the progress so that they don't flicker.
                // During this wait, if new progress is received, it will replace the previous progress (we will always get the latest progress information)
                await Task.Delay(500, cancellationToken);
            }

            result = await Install.WaitForResult(cancellationToken);
            StateHasChanged();
        }
        else if (Install.IsFinished)
        {
            result = Install.GetResult();
            StateHasChanged();
        }
    }

    private void SubscribeEvents(RunningAppInstall install)
    {
        Install.OnStarted += RestartUiUpdate;
    }

    private void UnsubscribeEvents(RunningAppInstall? install)
    {
        if (install is null)
            return;

        Install.OnStarted -= RestartUiUpdate;
    }

    public async ValueTask DisposeAsync()
    {
        UnsubscribeEvents(previousInstall);
        UnsubscribeEvents(Install);

        if (uiTask.HasValue)
        {
            uiTask.Value.Cancellation.Cancel();
            try
            {
                await uiTask.Value.Task;
            }
            catch (OperationCanceledException)
            {
            }
        }
    }
}
