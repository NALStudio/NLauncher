@using NLauncher.Index.Models.News
@using System.Collections.Immutable
@using System.Diagnostics.CodeAnalysis
@using NLauncher.Index.Models.News.Interactivity

<HeadContent>
    <!-- Preload news images to avoid pop-in -->
    @foreach (NewsEntry news in newsSorted ?? Enumerable.Empty<NewsEntry>())
    {
        <link rel="preload" href="@(news.Assets.Background.ToString())" as="image" />
        <link rel="preload" href="@(news.Assets.Logo.ToString())" as="image" />
    }
</HeadContent>

<MudStack Spacing="0" AlignItems="AlignItems.Center">
    <MudCarousel @ref=_carousel TData="NewsEntry" Class="news_banner_carousel" Style="@bulletsColor" SelectedIndexChanged="@CarouselIndexChanged" ShowArrows="false" AutoCycleTime="TimeSpan.FromSeconds(10)">
        @for (int i = 0; i < (newsSorted?.Length ?? 4); i++)
        {
            NewsEntry? news = newsSorted?[i];

            <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="news_banner_carousel_item_in" CustomTransitionExit="news_banner_carousel_item_out" Style="@GetBackgroundImageCss(news)">
                @if (news is null)
                {
                    <MudSkeleton Width="100%" Height="100%" SkeletonType="SkeletonType.Rectangle" />
                }
                else
                {
                    NewsInteractivity interactivity = news.Manifest.Interactivity;

                    <MudImage Class="news_banner_image" ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.LeftBottom" Src="@(news.Assets.Logo.ToString())" />

                    <div class="mt-3 px-3 py-2 news_banner_content news_banner_text">
                        <MudText Typo="Typo.caption"><b>@(news.Manifest.Title)</b></MudText>
                        <MudText>@(news.Manifest.Text)</MudText>
                        <div class="mt-2">
                            <NewsInteractivityButton Interactivity="@(news.Manifest.Interactivity)" />
                        </div>
                    </div>
                }
            </MudCarouselItem>
        }
    </MudCarousel>
</MudStack>

<style>
    .news_banner_carousel {
        width: 100%;
        aspect-ratio: 16 / 9;
        border-radius: 12px;
    }
    .news_banner_content {
        position: absolute;
        left: 24px;
        top: 55%;
        
        max-width: max(384px, 40%);
    }  
    .news_banner_text {
        border-radius: 6px;
        color: var(--mud-palette-text-primary);

        background: var(--mud-palette-appbar-background);
        backdrop-filter: blur(12px);
    }
    .news_banner_image {      
        position: absolute;
        margin-left: 24px;
        bottom: 45%;

        user-select: none;

        /* max aspect ratio 4:1, so ensure that max-width = 4 * height */
        height: 96px;
        max-width: 384px;
    }

    @@keyframes news_banner_carousel_item_in_animation {
        from { opacity: 0; padding-left: 72px; }
        to { opacity: 1; padding-left: 0px; }
    }
    .news_banner_carousel_item_in {
        animation: 0.5s news_banner_carousel_item_in_animation;
    }

    /* Stolen from: https://github.com/MudBlazor/MudBlazor/blob/be169a7689e809b07574882ca5e7e299149756d2/src/MudBlazor/Styles/components/_carousel.scss#L72 */
    /* A fadeout is used to hide overlapping edges since the border-radius makes these very visible. */
    @@keyframes news_banner_carousel_item_out_animation {
        from { opacity: 1; }
        to { opacity: 0; }
    }

    .news_banner_carousel_item_out {
        animation: 0.5s news_banner_carousel_item_out_animation;
        animation-fill-mode: forwards;
    }
</style>

@code {
    private MudCarousel<NewsEntry>? _carousel;
    private string? bulletsColor = null;

    private ImmutableArray<NewsEntry>? newsSorted;

    [Parameter]
    public required IEnumerable<NewsEntry>? News { get; set; }

    protected override void OnParametersSet()
    {
        newsSorted = News?.OrderBy(static n => n.Index).ToImmutableArray();
        if (_carousel is not null)
            RefreshBulletsColor();
    }

    private void CarouselIndexChanged(int index)
    {
        RefreshBulletsColor();
    }

    private void RefreshBulletsColor()
    {
        int? index = _carousel?.SelectedIndex;
        // index is -1 during load
        if (index.HasValue && index >= 0 && newsSorted.HasValue)
        {
            NewsEntry news = newsSorted.Value[index.Value];
            bulletsColor = GetBulletsColor(news.Assets.BackgroundBrightness);
        }
        else
        {
            bulletsColor = null;
        }
    }

    [return: NotNullIfNotNull(nameof(news))]
    private static string? GetBackgroundImageCss(NewsEntry? news)
    {
        if (news is null)
            return null;

        return $"background-image: url(\"{news.Assets.Background}\"); background-size: cover; background-position: center";
    }

    private static string GetBulletsColor(double brightness)
    {
        string color = brightness >= 0.5 ? "--mud-palette-black" : "--mud-palette-white";
        return $"color: var({color})";
    }
}