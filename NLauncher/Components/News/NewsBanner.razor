@using NLauncher.Index.Models.News
@using System.Collections.Immutable
@using System.Diagnostics.CodeAnalysis

<HeadContent>
<!-- Preload news images -->
@foreach (NewsEntry news in newsSorted ?? Enumerable.Empty<NewsEntry>())
{
    <link rel="preload" href="@(news.Assets.Background)" as="image" />
    <link rel="preload" href="@(news.Assets.Logo)" as="image" />
}
</HeadContent>

<MudStack Spacing="0" AlignItems="AlignItems.Center">
    <MudCarousel @ref=_carousel TData="NewsEntry" Class="banner_image_style" Style="@bulletsColor" SelectedIndexChanged="@(_ => RefreshBulletsColor())" ShowArrows="false" AutoCycleTime="TimeSpan.FromSeconds(10)">
        @foreach (NewsEntry? news in newsSorted ?? Enumerable.Repeat<NewsEntry?>(null, 4))
        {
            <MudCarouselItem Transition="Transition.Fade" Style="@GetBackgroundImageCss(news)">
                @if (news is null)
                {
                    <MudSkeleton Width="100%" Height="100%" SkeletonType="SkeletonType.Rectangle" />
                }
                else
                {

                }
            </MudCarouselItem>
        }
    </MudCarousel>
</MudStack>

<style>
    .banner_image_style {
    user-select: none;
    width: 100%;
    aspect-ratio: 16 / 9;
    border-radius: 12px;
    }
</style>

@code {
    private MudCarousel<NewsEntry>? _carousel;
    private string? bulletsColor = null;

    private ImmutableArray<NewsEntry>? newsSorted;

    [Parameter]
    public required IEnumerable<NewsEntry>? News { get; set; }

    protected override void OnParametersSet()
    {
        newsSorted = News?.OrderBy(static n => n.Index).ToImmutableArray();
        if (_carousel is not null)
            RefreshBulletsColor();
    }

    private void RefreshBulletsColor()
    {
        int? index = _carousel?.SelectedIndex;
        if (index.HasValue && newsSorted.HasValue)
        {
            NewsEntry news = newsSorted.Value[index.Value];
            bulletsColor = GetBulletsColor(news.Assets.BackgroundBrightness);
        }
        else
        {
            bulletsColor = null;
        }
    }

    [return: NotNullIfNotNull(nameof(news))]
    private static string? GetBackgroundImageCss(NewsEntry? news)
    {
        if (news is null)
            return null;

        return $"background-image: url(\"{news.Assets.Background}\"); background-size: cover; background-position: center";
    }

    private static string GetBulletsColor(double brightness)
    {
        string color = brightness >= 0.5 ? "--mud-palette-black" : "--mud-palette-white";
        return $"color: var({color})";
    }
}