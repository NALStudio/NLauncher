@using NLauncher.Index.Models.Applications

<MudDialog>
    <DialogContent>
        @(TriedRun?.DisplayName ?? "App") could not be started because @(GetReason()).
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => Dialog!.Close(true))">Kill Process</MudButton>
        <MudButton OnClick="@(() => Dialog!.Close(false))" Variant="Variant.Filled" Color="Color.Primary">
            Ok
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [CascadingParameter]
    private IMudDialogInstance? Dialog { get; set; }

    [Parameter, EditorRequired]
    public required AppManifest? TriedRun { get; set; }

    [Parameter, EditorRequired]
    public required AppManifest? AlreadyRunning { get; set; }

    private string GetReason()
    {
        if (TriedRun is null || AlreadyRunning is null)
            return "another NLauncher application is already running";

        if (TriedRun.Uuid == AlreadyRunning.Uuid)
            return "another instance of it is already running";
        else
            return $"an instance of {AlreadyRunning.DisplayName} is already running";
    }

    /// <summary>
    /// Returns <see langword="true"/> if the process should be killed. <see langword="false"/> otherwise.
    /// </summary>
    public static async Task<bool> ShowAsync(IDialogService dialogService, AppManifest? triedRun, AppManifest? alreadyRunning)
    {
        DialogParameters<ApplicationAlreadyRunningDialog> parameters = new()
        {
            { x => x.TriedRun, triedRun },
            { x => x.AlreadyRunning, alreadyRunning }
        };

        IDialogReference dialog = await dialogService.ShowAsync<ApplicationAlreadyRunningDialog>("Application Already Running", parameters);
        DialogResult? result = await dialog.Result;
        if (result?.Canceled == true)
            return false;

        return (bool?)result?.Data == true;
    }
}
