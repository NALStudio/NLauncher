@using NLauncher.Code
@using NLauncher.Code.Models
@using NLauncher.Index.Enums
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Applications.Installs
@using System.Collections.Immutable

<MudDialog>
    <DialogContent>
        <MudStack Class="mb-2">
            @if (ShowInstallNLauncher)
            {
                <MudButton FullWidth Size="Size.Large" Color="Color.Primary" Variant="Variant.Outlined" EndIcon="@(Icons.Material.Rounded.OpenInNew)" Href="@(NLauncherConstants.LatestReleaseUrl)" Target="_blank">
                    Install Using NLauncher
                </MudButton>
            }

            @{
                Platforms currentPlatform = PlatformsEnum.GetCurrentPlatform();
                foreach (AppInstall install in Options)
                {
                    if (install.SupportsAutomaticInstall(currentPlatform))
                    {
                        // If automatic install is supported, provide both options to user
                        <ChooseInstallDialogButton Install="@(install)" IsAutomatic="true" OnClick="@(nav => Close(nav, install))"/>
                    }

                    <ChooseInstallDialogButton Install="@(install)" IsAutomatic="false" OnClick="@(nav => Close(nav, install))"/>
                }
            }
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter, EditorRequired]
    public required ImmutableArray<AppInstall> Options { get; set; }

    [Parameter]
    public bool ShowInstallNLauncher { get; set; } = false;

    private void Close(bool hrefNavigated, AppInstall chosenOption)
    {
        if (!hrefNavigated)
            Dialog!.Close(chosenOption);
        else
            Dialog!.Cancel();
    }

    /// <summary>
    /// Run <see cref="ShowAsync" /> with default "Choose Install" title.
    /// </summary>
    public static async Task<CancellableResult<AppInstall>> ShowInstallAsync(IDialogService dialogService, IEnumerable<AppInstall> options)
    {
        bool showInstallNLauncher = OperatingSystem.IsBrowser();
        return await ShowAsync(dialogService, "Choose Install", options, showInstallNLauncher: showInstallNLauncher);
    }

    /// <summary>
    /// Run <see cref="ShowAsync" /> with default "Choose Website" title.
    /// </summary>
    public static async Task<CancellableResult<AppInstall>> ShowLinkAsync(IDialogService dialogService, IEnumerable<AppInstall> options)
        => await ShowAsync(dialogService, "Choose Website", options);

    public static async Task<CancellableResult<AppInstall>> ShowAsync(IDialogService dialogService, string title, IEnumerable<AppInstall> options, bool showInstallNLauncher = false)
    {
        DialogOptions dialogOptions = new()
        {
            CloseButton = true
        };

        ImmutableArray<AppInstall> optionsArray = options.ToImmutableArray();
        DialogParameters<ChooseInstallDialog> dialogParameters = new()
        {
            { x => x.Options, optionsArray }
        };

        IDialogReference dialog = await dialogService.ShowAsync<ChooseInstallDialog>(title, dialogParameters, dialogOptions);
        DialogResult? result = await dialog.Result;
        if (result is null || result.Canceled)
            return CancellableResult<AppInstall>.Cancelled();
        else
            return CancellableResult<AppInstall>.Success((AppInstall)result.Data!);
    }
}