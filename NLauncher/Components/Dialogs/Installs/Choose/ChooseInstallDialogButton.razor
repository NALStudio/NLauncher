@using NLauncher.Code
@using NLauncher.Index.Models.Applications.Installs
@using System.Diagnostics

@inject IDialogService DialogService

<MudButton FullWidth Size="Size.Large" Color="Color.Primary" Variant="@GetVariant()" StartIcon="@GetStartIcon()" EndIcon="@GetEndIcon()" Href="@(Href?.ToString())" Target="_blank" OnClick="OnClickHandler">
    @GetButtonText()
</MudButton>

@code {
    [Parameter, EditorRequired]
    public required AppInstall Install { get; set; }

    [Parameter]
    public bool IsAutomatic { get; set; } = false;

    [Parameter]
    public bool IsManual { get; set; } = false;

    [Parameter]
    public EventCallback<ChooseInstallDialogButton> OnClick { get; set; }

    private Variant GetVariant() => IsAutomatic ? Variant.Outlined : Variant.Text;

    public Uri? Href { get; private set; }

    protected override void OnParametersSet()
    {
        if (IsAutomatic || IsManual)
            Href = null;
        else
            Href = Install.GetHrefUri();
    }

    private async Task OnClickHandler()
    {
        await OnClick.InvokeAsync(this);
    }

    private string? GetEndIcon()
    {
        if (Href is not null)
            return Icons.Material.Rounded.OpenInNew;

        return null;
    }

    private string? GetStartIcon()
    {
        return Install switch
        {
            BinaryAppInstall => Icons.Material.Rounded.Download,
            StoreLinkAppInstall => Icons.Material.Rounded.Storefront,
            WebsiteAppInstall => Icons.Material.Rounded.Language,
            _ => null
        };
    }

    private string GetButtonText()
    {
        return Install switch
        {
            BinaryAppInstall => $"{AutomaticOrManualText()} Install ({Install.GetSupportedPlatforms()})",
            StoreLinkAppInstall or WebsiteAppInstall => $"Open In {Href?.Host ?? "<error>"}",
            _ => "<error>"
        };
    }

    private string AutomaticOrManualText() => IsAutomatic ? "Automatic" : "Manual";
}
