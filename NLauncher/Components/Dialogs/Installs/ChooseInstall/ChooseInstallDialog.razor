@using NLauncher.Code.Models
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Applications.Installs
@using NLauncher.Shared.AppHandlers.Base
@using System.Collections.Immutable

<MudDialog>
    <DialogContent>
        <MudStack Class="mb-2">
            @foreach (InstallOption opt in Options)
            {
                <ChooseInstallDialogButton Handler="@(opt.Handler)"
                                           Install="@(opt.Install)"
                                           OnClick="@(() => Close(opt))"/>
            }
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? Dialog { get; set; }

    [Parameter, EditorRequired]
    public required ImmutableArray<InstallOption> Options { get; set; }

    private void Close(InstallOption chosenOption)
    {
        Dialog!.Close(chosenOption);
    }

    public static async Task<CancellableResult<InstallOption>> ShowAsync(IDialogService dialogService, IEnumerable<InstallOption> options)
    {
        DialogOptions dialogOptions = new()
        {
            CloseButton = true
        };

        ImmutableArray<InstallOption> optionsArray = options.ToImmutableArray();
        DialogParameters<ChooseInstallDialog> dialogParameters = new()
        {
            { x => x.Options, optionsArray }
        };

        IDialogReference dialog = await dialogService.ShowAsync<ChooseInstallDialog>("Choose Install", dialogParameters, dialogOptions);
        DialogResult? result = await dialog.Result;
        if (result is null || result.Canceled)
            return CancellableResult<InstallOption>.Cancelled();
        else
            return CancellableResult<InstallOption>.Success((InstallOption)result.Data!);
    }
}