@using NLauncher.Code.Extensions
@using NLauncher.Index.Enums
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Index
@using NLauncher.Pages
@using NLauncher.Services.Index

@inject NavigationManager navigationManager
@inject IndexService IndexService

<MudItem xs="12" sm="6" lg="4" xl="3">
    <!-- Clip overflow to fix skeleton rendering incorrectly -->
    <!-- onclick on MudCard instead of MudItem so that the click doesn't register inside the grid spacing -->
    <MudCard @onclick=StoreCardClicked
    @onmouseover=SetHoverEffectVisible
    @onmouseout=SetHoverEffectHidden
    Class="@(GetStoreCardClasses())"
    Outlined Elevation="0"
    Style="overflow:clip;cursor:pointer">
        <!-- Image -->
        @if (Entry is not null)
        {
            <BannerImage Entry="Entry" Height="@imageHeight">
                <ImageContent Context="asset">
                    <MudCardMedia Image="@(asset.Url.ToString())" Height="@imageHeight" />
                </ImageContent>
            </BannerImage>
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="@($"{imageHeight}px")" />
        }

        <MudCardContent Style="position:relative; z-index:0">
            <!-- Background hover effect -->
            <div class="store_card_background" style=@(GetBackgroundHoverStyle()) />

            <!-- Title -->
            @if (Entry is not null)
            {
                <MudText Class="no_text_wrap" Typo="Typo.h5">@(Entry.Manifest.DisplayName)</MudText>
            }
            else
            {
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="80%" Height="42px" />
            }

            <!-- Developer/Publisher -->
            @if (Entry is not null)
            {
                <MudText Class="no_text_wrap" Typo="Typo.body2">@(FormatDeveloperPublisher(Entry.Manifest))</MudText>
            }
            else
            {
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="50%" />
            }
        </MudCardContent>
    </MudCard>
</MudItem>

<style>
    /* Stolen from: https://github.com/MudBlazor/MudBlazor/blob/6da538936a57cf08ad818c0fa86114518a4e60db/src/MudBlazor/Styles/components/_button.scss#L154C7-L154C126 */
    .store_card:hover {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0,0,0,.12);
    }

    .store_card_background {
    z-index: -1;
    position: absolute;
    left:0;right:0;top:0;bottom:0;
    background-position: bottom;
    background-size: cover;
    filter: blur(48px);
    transition-duration: 250ms;
    }

    .no_text_wrap {
    white-space: nowrap;
    overflow: clip;
    }
</style>

@code {
    private const int imageHeight = 300;

    /// <summary>
    /// Use <see langword="null"/> for skeleton.
    /// </summary>
    [Parameter, EditorRequired]
    public IndexEntry? Entry { get; set; }

    private bool hoverEffectVisible = false;

    private static string FormatDeveloperPublisher(AppManifest manifest)
    {
        if (manifest.Developer == manifest.Publisher)
            return manifest.Developer;
        else
            return $"{manifest.Developer} | {manifest.Publisher}";
    }

    private string GetStoreCardClasses()
    {
        if (Entry is null)
            return string.Empty;

        return "store_card";
    }

    private async Task StoreCardClicked()
    {
        if (Entry is null)
            return;

        IndexManifest index = await IndexService.GetIndexAsync();
        navigationManager.NavigateToApp(index, Entry.Manifest);
    }

    private void SetHoverEffectVisible()
    {
        hoverEffectVisible = true;
        StateHasChanged();
    }
    private void SetHoverEffectHidden()
    {
        hoverEffectVisible = false;
        StateHasChanged();
    }

    private string GetBackgroundHoverStyle()
    {
        IndexAsset? asset = Entry?.Assets.Largest(AssetType.Banner);
        string opacity = hoverEffectVisible ? "0.35" : "0";

        string css = $"opacity: {opacity};";
        if (asset is not null)
            css += $"background-image: url(\"{asset.Url}\");";

        return css;
    }
}
