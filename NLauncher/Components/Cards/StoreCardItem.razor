@using NLauncher.Index.Enums
@using NLauncher.Index.Models.Applications
@using NLauncher.Index.Models.Index
@using NLauncher.Pages
@using NLauncher.Services.Index

@inject NavigationManager navigationManager
@inject IndexService IndexService

<MudItem @onclick=StoreCardClicked xs="12" md="6" lg="4" xl="3">
    <!-- Clip overflow to fix skeleton rendering incorrectly -->
    <MudCard Class="@(GetStoreCardClasses())" Outlined Elevation="0" Style="overflow:clip">
        <!-- Image -->
        @if (Entry is not null)
        {
            IndexAsset? asset = Entry.Assets.Closest(imageHeight, AssetType.Banner, AssetType.Icon);

            if (asset?.Type == AssetType.Banner)
            {
                <MudCardMedia Image="@(asset.Url.ToString())" Height="@imageHeight" />
            }
            else
            {
                <MudStack Style=@imageHeightCss AlignItems="AlignItems.Center" Justify="Justify.Center">
                    @if (asset is not null)
                    {
                        <MudImage Src="@(asset.Url.ToString())"
                                    Height="@iconImageHeight" />
                    }
                    <MudText Typo="Typo.h4">@(Entry.Manifest.DisplayName)</MudText>
                </MudStack>
            }
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="@($"{imageHeight}px")" />
        }

        <MudCardContent>
            <!-- Title -->
            @if (Entry is not null)
            {
                <MudText Typo="Typo.h5">@(Entry.Manifest.DisplayName)</MudText>
            }
            else
            {
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="80%" Height="42px" />
            }

            <!-- Developer/Publisher -->
            @if (Entry is not null)
            {
                <MudText Typo="Typo.body2">@(FormatDeveloperPublisher(Entry.Manifest))</MudText>
            }
            else
            {
                <MudSkeleton SkeletonType="SkeletonType.Text" Width="50%" />
            }
        </MudCardContent>
    </MudCard>
</MudItem>

<style>
    /* Stolen from: https://github.com/MudBlazor/MudBlazor/blob/6da538936a57cf08ad818c0fa86114518a4e60db/src/MudBlazor/Styles/components/_button.scss#L154C7-L154C126 */
    .store_card:hover {
        box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0,0,0,.12);
    }
</style>

@code {
    private const int imageHeight = 300;
    private const int iconImageHeight = imageHeight / 2;
    private static readonly string imageHeightCss = $"height:{imageHeight}px;";

    /// <summary>
    /// Use <see langword="null"/> for skeleton.
    /// </summary>
    [Parameter, EditorRequired]
    public IndexEntry? Entry { get; set; }

    private static string FormatDeveloperPublisher(AppManifest manifest)
    {
        if (manifest.Developer == manifest.Publisher)
            return manifest.Developer;
        else
            return $"{manifest.Developer} | {manifest.Publisher}";
    }

    private string GetStoreCardClasses()
    {
        if (Entry is null)
            return string.Empty;

        return "store_card";
    }

    private async Task StoreCardClicked()
    {
        IndexManifest index = await IndexService.GetIndexAsync();
        navigationManager.NavigateTo(AppStorePage.GetPageRoute(index, Entry?.Manifest));
    }
}
